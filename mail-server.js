import { createServer } from 'http';
import { writeFileSync, readFileSync, existsSync } from 'fs';
import { exec } from 'child_process';
import nodemailer from 'nodemailer';

const PORT = 3000;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nodemailer –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º
const transporter = nodemailer.createTransport({
    host: 'smtp.astorius.ru',
    port: 587,
    secure: false,
    auth: {
        user: '9@astorius.ru',
        pass: 'YOUR_APP_PASSWORD' // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    }
});

// –°—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ IP –¥–ª—è rate limiting
const requestCounts = new Map();
const RATE_LIMIT_WINDOW = 60000; // 1 –º–∏–Ω—É—Ç–∞
const MAX_REQUESTS_PER_WINDOW = 10; // –º–∞–∫—Å–∏–º—É–º 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É

const server = createServer((req, res) => {
    // Rate limiting
    const clientIP = req.connection.remoteAddress || req.socket.remoteAddress;
    const now = Date.now();
    
    if (!requestCounts.has(clientIP)) {
        requestCounts.set(clientIP, { count: 1, resetTime: now + RATE_LIMIT_WINDOW });
    } else {
        const clientData = requestCounts.get(clientIP);
        if (now > clientData.resetTime) {
            clientData.count = 1;
            clientData.resetTime = now + RATE_LIMIT_WINDOW;
        } else {
            clientData.count++;
            if (clientData.count > MAX_REQUESTS_PER_WINDOW) {
                console.log(`üö® Rate limit exceeded for IP: ${clientIP}`);
                res.writeHead(429, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ success: false, error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' }));
                return;
            }
        }
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ)
    const origin = req.headers.origin;
    if (origin && origin.startsWith('http://localhost:517')) {
        res.setHeader('Access-Control-Allow-Origin', origin);
    } else {
        res.setHeader('Access-Control-Allow-Origin', 'http://localhost:5173');
    }
    res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    res.setHeader('Access-Control-Max-Age', '86400'); // 24 —á–∞—Å–∞
    
    if (req.method === 'OPTIONS') {
        res.writeHead(200);
        res.end();
        return;
    }
    
    let url = req.url;
    
    // –£–±–∏—Ä–∞–µ–º query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (url.includes('?')) {
        url = url.split('?')[0];
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º
    if (url === '/send-mail-simple.php' && req.method === 'POST') {
        let body = '';
        
        req.on('data', chunk => {
            body += chunk.toString();
        });
        
        req.on('end', () => {
            try {
                const data = JSON.parse(body);
                
                // –í–∞–ª–∏–¥–∞—Ü–∏—è
                if (!data.name || !data.phone) {
                    console.log(`‚ùå –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç IP: ${clientIP}`);
                    res.writeHead(400, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ success: false, error: '–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' }));
                    return;
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                const suspiciousPatterns = /<script|javascript:|on\w+\s*=|eval\(|alert\(/i;
                const allData = JSON.stringify(data);
                if (suspiciousPatterns.test(allData)) {
                    console.log(`üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç IP: ${clientIP}`, data);
                    res.writeHead(400, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ success: false, error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ' }));
                    return;
                }
                
                // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –¥–∞–Ω–Ω—ã—Ö
                if (data.name.length > 100 || data.phone.length > 20 || 
                    (data.email && data.email.length > 100) || 
                    (data.message && data.message.length > 2000)) {
                    console.log(`‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç IP: ${clientIP}`);
                    res.writeHead(400, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({ success: false, error: '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' }));
                    return;
                }
                
                // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
                console.log('–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:', {
                    name: data.name,
                    phone: data.phone,
                    email: data.email || '–ù–µ —É–∫–∞–∑–∞–Ω',
                    message: data.message || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                    date: new Date().toLocaleString('ru-RU')
                });
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
                const mailOptions = {
                    from: '9@astorius.ru',
                    to: '9@astorius.ru',
                    subject: '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞',
                    text: `
–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞:
–î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}

–ò–º—è: ${data.name}
–¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}
Email: ${data.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}
–°–æ–æ–±—â–µ–Ω–∏–µ: ${data.message || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

IP: ${req.connection.remoteAddress}
User-Agent: ${req.headers['user-agent'] || '–ù–µ —É–∫–∞–∑–∞–Ω'}
`,
                    html: `
<h2>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞</h2>
<p><strong>–î–∞—Ç–∞:</strong> ${new Date().toLocaleString('ru-RU')}</p>
<p><strong>–ò–º—è:</strong> ${data.name}</p>
<p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${data.phone}</p>
<p><strong>Email:</strong> ${data.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
<p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> ${data.message || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
<hr>
<p><small>IP: ${req.connection.remoteAddress}</small></p>
<p><small>User-Agent: ${req.headers['user-agent'] || '–ù–µ —É–∫–∞–∑–∞–Ω'}</small></p>
`
                };
                
                transporter.sendMail(mailOptions, (error, info) => {
                    if (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞:', error.message);
                    } else {
                        console.log('‚úÖ –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ 9@astorius.ru');
                    }
                });
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({
                    success: true,
                    message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
                    data: {
                        id: Date.now(),
                        name: data.name,
                        phone: data.phone,
                        email: data.email || '',
                        message: data.message || ''
                    }
                }));
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
                res.writeHead(500, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }));
            }
        });
        
        return;
    }
    
    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
    let filePath = `.${url}`;
    if (url === '/') {
        filePath = './index.html';
    }
    
    if (!existsSync(filePath)) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        res.end('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    try {
        const content = readFileSync(filePath);
        let contentType = 'text/plain';
        
        if (url.endsWith('.html')) contentType = 'text/html';
        else if (url.endsWith('.css')) contentType = 'text/css';
        else if (url.endsWith('.js')) contentType = 'application/javascript';
        else if (url.endsWith('.json')) contentType = 'application/json';
        
        res.writeHead(200, { 'Content-Type': contentType });
        res.end(content);
    } catch (err) {
        res.writeHead(500, { 'Content-Type': 'text/plain' });
        res.end('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞');
    }
});

server.listen(PORT, () => {
    console.log(`üöÄ –ü—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
    console.log(`üìß –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å–µ–º: http://localhost:${PORT}/send-mail-simple.php`);
    console.log(`üìù –¢–µ—Å—Ç —Ñ–æ—Ä–º—ã: http://localhost:${PORT}/test-mail-form.html`);
});

server.on('error', (err) => {
    if (err.code === 'EADDRINUSE') {
        console.log(`‚ùå –ü–æ—Ä—Ç ${PORT} —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç.`);
    } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${err.message}`);
    }
});